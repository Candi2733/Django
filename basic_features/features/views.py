from datetime import datetime, timedelta
import json
from django.db import IntegrityError
from django.http import JsonResponse
import jwt
from basic_features.settings import EMAIL_HOST_USER, SECRET_KEY
from .models import User
from django.contrib.auth.hashers import make_password, check_password
from django.core.mail import send_mail 
from django.template.response import TemplateResponse
from django.core.cache import cache
import logging

logger = logging.getLogger(__name__)

def index(request):
    return TemplateResponse(request, "index.html")

# Signup using email,mobile and password, email and mobile are unique field.
def sign_up(request):
    try:
        if request.method == 'POST':
            user_data = json.loads(request.body)
            email = user_data.get('email')
            fname = user_data.get('firstname')
            lname = user_data.get('lastname')
            mob = int(user_data.get('phone'))
            dob = user_data.get('dob')
            password = user_data.get('password')
            pasword = make_password(password)

            existing_user = User.objects.filter(email=email).first()
            if existing_user:
                return JsonResponse({'error' : 'EmailId already exists'}, status = 400)
            try:
                user = User.objects.create(
                    email=email,
                    firstname=fname,
                    lastname=lname,
                    phone=mob,
                    dob=dob,
                    password=pasword
                )

                user.save()
                message = greetings_mail(email)
                logger.info(message)
                return JsonResponse({'message': 'User data saved successfully'})

            except IntegrityError as e:
                return JsonResponse({'error': 'Database error: ' + str(e)}, status=500)
        else:
            return JsonResponse({'error': 'Method Not Allowed'}, status=405)
    except Exception as e:
        return JsonResponse({'error': str(e)}, status=500)
    
# Once after sign up a event should be generated by sending a greetings in a mail.
def greetings_mail(email):
    try:
        send_mail(
            "Sign Up Successful",
            "Welcome New User, your sign up has been successfully completed.",
            EMAIL_HOST_USER,
            [email],
            fail_silently=False,
        )
        return 1
    except Exception as e:
        return str(e)

# Login with email and passowrd, after successful verfication a JWT token must be generated.    
def login(request):
    cache.clear()
    try:
        if request.method == 'POST':
            user_data = json.loads(request.body)
            email = user_data.get('email')
            password = user_data.get('password')

            try:
                user = User.objects.get(email=email)
                if check_password(password, user.password):
                    expiration_time = datetime.utcnow() + timedelta(hours=1)
                    payload = {
                        'email': email,
                        'exp': expiration_time,
                    }
                    jwt_token = jwt.encode(payload,SECRET_KEY, algorithm = 'HS256')
                    return JsonResponse({'message': 'Login successful', 'token': jwt_token})
                else:
                    return JsonResponse({'error': 'Incorrect password'}, status = 500)
            except IntegrityError as e:
                return JsonResponse({'error': 'Database error: ' + str(e)}, status=500)
        else:
            return JsonResponse({'error': 'Method Not Allowed'}, status=405)
    except Exception as e:
        return JsonResponse({'error': str(e)}, status=500)

# Logout api the token scope must be ended for that user once after logout.
def logout(request):
    try:
        # if 'Authorization' in request.headers:
        #     auth_header = request.headers['Authorization']
        #     token = auth_header.split(' ')[1]
        # else:
        #     return JsonResponse({'error' : 'Authorization Header missing'}, status = 400)
        cache.clear()
        print("Cache data cleared successfully")
        return JsonResponse({'message': 'Logged out successfully'})
    except Exception as e:
        return JsonResponse({'error': str(e)}, status=500)

# Get User profile
def user_profile(request):
    try:
        # if 'Authorization' in request.headers:
        #     auth_header = request.headers['Authorization']
        #     token = auth_header.split(' ')[1]
        # else:
        #     return JsonResponse({'error' : 'Authorization Header missing'}, status = 400)
        # decoded_data = jwt.decode(jwt=token, key=SECRET_KEY, algorithms=["HS256"])
        # email = decoded_data['email']
        if hasattr(request, 'email'):
            if cache.get(request.email):
                user = cache.get(request.email)
                print("Data from cache")
            else:
                try:
                    user = User.objects.get(email=request.email)
                    cache.set(request.email, user)
                    print("Data from DB")
                except Exception as e:
                    return JsonResponse({'error' : str(e)}, status=500)  
            data = {
                'email' : user.email,
                'fname' : user.firstname,
                'lname' : user.lastname,
                'mob' : int(user.phone),
                'dob' : user.dob,
            }
            return JsonResponse(data, status=200)
        else:
            return JsonResponse({'error' : 'No email found'}, status=400)
    except Exception as e:
        return JsonResponse({'error' : str(e)}, status=500)

# Update user profile
def update_user(request):
    try:
        # if 'Authorization' in request.headers:
        #     auth_header = request.headers['Authorization']
        #     token = auth_header.split(' ')[1]
        # else:
        #     return JsonResponse({'error' : 'Authorization Header missing'}, status = 400)
        # decoded_data = jwt.decode(jwt=token, key=SECRET_KEY, algorithms=["HS256"])
        # email = decoded_data['email']
        if hasattr(request, 'email'):
            user = User.objects.get(email=request.email)
            if request.method == 'POST':
                user_data = json.loads(request.body)
                fname = user_data.get('firstname')
                lname = user_data.get('lastname')
                mob = int(user_data.get('phone'))
                dob = user_data.get('dob')

                user.firstname = fname
                user.lastname = lname
                user.phone = mob
                user.dob = dob
                user.save()
                return JsonResponse({'message': 'User data changed successfully'})
            else:
                return JsonResponse({'error': 'Method Not Allowed'}, status=405)
        else:
            return JsonResponse({'error' : 'No email found'}, status=400)
    except Exception as e:
        return JsonResponse({'error' : str(e)}, status=500)